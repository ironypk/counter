{"version":3,"sources":["components/Input/Input.module.css","components/Counter/Counter.module.css","components/Button/Button.module.css","components/Counter/Counter.tsx","components/Button/Button.tsx","components/Control/Control.tsx","components/Input/Input.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Counter","edit","error","count","maxValue","classes","s","active","className","join","Button","props","button","Control","type","inc","reset","set","minValue","Fragment","onClick","disabled","Input","errorMessage","title","restProps","inputClasses","style","input","root","label","error_message","COUNT","CountSetter","maxValueChangeHandler","maxValueErrorMessage","minValueChangeHandler","minValueErrorMessage","name","value","onChange","App","useState","setMaxValue","setMinValue","setCount","setEdit","setMaxValueErrorMessage","setMinValueErrorMessage","setError","useEffect","key","defaultState","state","localStorage","getItem","JSON","parse","getLocalStorage","e","currentTarget","setItem","stringify","prev","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.320d1716.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Input_root__1Wnt_\",\"title\":\"Input_title__2QKwA\",\"input\":\"Input_input__2g8yw\",\"error\":\"Input_error__2QPkD\",\"error_message\":\"Input_error_message__2zgbK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"Counter_active__28C-0\",\"error\":\"Counter_error__k43ie\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2EuS7\"};","import React from 'react';\r\nimport s from './Counter.module.css';\r\n\r\nexport type CounterPropsType = {\r\n    count: number\r\n    maxValue: number\r\n    error: boolean\r\n    edit: boolean\r\n}\r\n\r\nexport const Counter: React.FC<CounterPropsType> = ({edit, error, count, maxValue}) => {\r\n    const classes = [\r\n        'counter',\r\n        count >= maxValue && s.active,\r\n        error ? s.error : ''\r\n    ]\r\n    const getTitle = () => {\r\n        if (error) {\r\n            return <div>Incorrect value!</div>\r\n        } else if (edit) {\r\n            return <div>end values and press \"set\"</div>\r\n        }\r\n        return <div>{count}</div>\r\n    }\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            {getTitle()}\r\n        </div>\r\n    )\r\n}","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\r\nimport s from './Button.module.css'\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\n\r\nexport const Button: React.FC<DefaultButtonPropsType>\r\n    = (props) =>\r\n    <button className={s.button} {...props}/>","import React from 'react';\r\nimport {Button} from '../Button/Button';\r\n\r\nexport type ControlPropsType = {\r\n    inc?: () => void\r\n    reset?: () => void\r\n    set?: () => void\r\n    count?: number\r\n    maxValue?: number\r\n    minValue?: number\r\n    error?: boolean\r\n    edit?: boolean\r\n    type: 'get' | 'set'\r\n}\r\n\r\nexport const Control: React.FC<ControlPropsType> =\r\n    ({\r\n         type, edit,\r\n         error, inc, reset,\r\n         set, count, maxValue,\r\n         minValue}) =>\r\n{\r\n\r\n    return (\r\n        <div className={'control'}>\r\n            {\r\n                type === 'get' ?\r\n                    <React.Fragment>\r\n                        <Button onClick={inc}\r\n                                disabled={count && maxValue && count >= maxValue || edit || error}>inc</Button>\r\n                        <Button onClick={reset} disabled={count === minValue || edit || error}>reset</Button>\r\n                    </React.Fragment>\r\n                    :\r\n                    <Button onClick={set} disabled={error || !edit}>set</Button>\r\n            }\r\n        </div>\r\n    )\r\n}","import React, {DetailedHTMLProps, InputHTMLAttributes} from 'react';\r\nimport style from './Input.module.css'\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\nexport type InputPropsType = {\r\n    title?: string\r\n    errorMessage:string\r\n}\r\nexport const Input: React.FC<InputPropsType & DefaultInputPropsType> =\r\n    ({errorMessage, title, ...restProps}) => {\r\n    const inputClasses = [\r\n        style.input,\r\n        errorMessage ? style.error : ''\r\n    ]\r\n    return (\r\n        <div className={style.root}>\r\n            <div className={style.title}>\r\n                {title}\r\n            </div>\r\n            <label className={style.label}>\r\n                {errorMessage && <div className={style.error_message}>{errorMessage}</div>}\r\n                <input className={inputClasses.join(' ')} {...restProps} type=\"number\"/>\r\n            </label>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport './App.css';\nimport {Counter} from './components/Counter/Counter';\nimport {Control} from './components/Control/Control';\nimport {Input} from './components/Input/Input';\n\nconst COUNT = 'COUNT'\n\ntype StateType = {\n    minValue:number\n    maxValue:number\n}\n\nfunction setLocalStorage<T>(key: string, state: T) {\n    localStorage.setItem(key, JSON.stringify(state))\n}\n\nfunction getLocalStorage<T>(key: string,defaultState : T) {\n    const state = localStorage.getItem(key)\n    if (state) {\n        defaultState = JSON.parse(state) as T\n    }\n    return defaultState\n}\n\nfunction App() {\n    const [maxValue, setMaxValue] = useState(0)\n    const [minValue, setMinValue] = useState(0)\n    const [count, setCount] = useState(0)\n\n    const [edit, setEdit] = useState(false)\n    const [maxValueErrorMessage, setMaxValueErrorMessage] = useState('')\n    const [minValueErrorMessage, setMinValueErrorMessage] = useState('')\n    const [error, setError] = useState(false)\n\n    function inc() {\n        count < maxValue && setCount(prev => prev + 1)\n    }\n\n    function reset() {\n        setCount(minValue)\n    }\n\n    function set() {\n        setLocalStorage<StateType>(COUNT, {maxValue, minValue})\n        setCount(minValue)\n        setEdit(false)\n    }\n\n    function maxValueChangeHandler(e: ChangeEvent<HTMLInputElement>) {\n        setEdit(true)\n        setMaxValue(+e.currentTarget.value)\n        if (+e.currentTarget.value <= minValue) {\n            setMaxValueErrorMessage('max value must be > min value')\n            setMinValueErrorMessage('min value must be < max value')\n            setError(true)\n        }\n        if (+e.currentTarget.value > minValue) {\n            setMaxValueErrorMessage('')\n            setMinValueErrorMessage('')\n            setError(false)\n        }\n        if (minValue < 0) {\n            setMinValueErrorMessage('min value must be >= 0')\n            setError(true)\n        }\n        if (+e.currentTarget.value <= 0) {\n            setMaxValueErrorMessage('max value must be > 0')\n            setError(true)\n        }\n    }\n\n    function minValueChangeHandler(e: ChangeEvent<HTMLInputElement>) {\n        setEdit(true)\n        setMinValue(+e.currentTarget.value)\n        if (+e.currentTarget.value >= maxValue) {\n            setMinValueErrorMessage('min value must be < max value')\n            setMaxValueErrorMessage('max value must be > min value')\n            setError(true)\n        }\n        if (+e.currentTarget.value < maxValue) {\n            setMaxValueErrorMessage('')\n            setMinValueErrorMessage('')\n            setError(false)\n        }\n        if (maxValue <= 0) {\n            setMaxValueErrorMessage('max value must be >= 0')\n            setError(true)\n        }\n        if (+e.currentTarget.value < 0) {\n            setMinValueErrorMessage('min value must be >= 0')\n            setError(true)\n        }\n    }\n\n    useEffect(() => {\n        const value = getLocalStorage<StateType>(COUNT,{maxValue:5,minValue:0})\n        if(value){\n            setMaxValue(value.maxValue)\n            setMinValue(value.minValue)\n            setCount(value.minValue)\n        }\n    }, [])\n\n    return (\n        <div className=\"root\">\n            <div className=\"window\">\n                <CountSetter minValue={minValue} maxValue={maxValue} maxValueChangeHandler={maxValueChangeHandler}\n                             maxValueErrorMessage={maxValueErrorMessage} minValueChangeHandler={minValueChangeHandler}\n                             minValueErrorMessage={minValueErrorMessage}/>\n                <Control edit={edit} type={'set'} set={set} error={error}/>\n            </div>\n            <div className=\"window\">\n                <Counter count={count} edit={edit} maxValue={maxValue}\n                         error={!!maxValueErrorMessage || !!minValueErrorMessage}/>\n                <Control edit={edit} type={'get'} inc={inc} reset={reset} count={count} maxValue={maxValue}\n                         minValue={minValue} error={!!maxValueErrorMessage || !!minValueErrorMessage}/>\n            </div>\n        </div>\n    );\n}\n\nexport type CountSetterPropsType = {\n    maxValue: number\n    minValue: number\n    maxValueChangeHandler: (e: ChangeEvent<HTMLInputElement>) => void\n    minValueChangeHandler: (e: ChangeEvent<HTMLInputElement>) => void\n    maxValueErrorMessage: string\n    minValueErrorMessage: string\n}\n\nexport const CountSetter: React.FC<CountSetterPropsType> = ({maxValue, maxValueChangeHandler, maxValueErrorMessage, minValue, minValueChangeHandler, minValueErrorMessage}) => {\n    return (\n        <div className=\"counter\">\n            <Input\n                title='max value:'\n                name=\"max\"\n                value={maxValue}\n                onChange={maxValueChangeHandler}\n                errorMessage={maxValueErrorMessage}\n\n            />\n            <Input\n                title='min value:'\n                name=\"min\"\n                value={minValue}\n                onChange={minValueChangeHandler}\n                errorMessage={minValueErrorMessage}\n            />\n        </div>\n    )\n}\n\nexport default App;\n\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}