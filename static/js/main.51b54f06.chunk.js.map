{"version":3,"sources":["components/Button/Button.module.css","redux/events.ts","components/Counter/Counter.tsx","components/Button/Button.tsx","components/Control/Control.tsx","components/Input/Input.tsx","redux/countReducer.ts","App.tsx","reportWebVitals.ts","redux/store.ts","utils/localStorage.ts","index.tsx","components/Input/Input.module.css","components/Counter/Counter.module.css"],"names":["module","exports","Events","Counter","edit","error","count","maxValue","classes","s","active","className","join","Button","props","button","Control","type","inc","reset","set","minValue","Fragment","onClick","disabled","Input","errorMessage","title","restProps","inputClasses","style","input","root","label","error_message","initialState","maxValueErrorMessage","minValueErrorMessage","CountSetter","maxValueChangeHandler","minValueChangeHandler","name","value","onChange","App","dispatch","useDispatch","useSelector","state","e","currentTarget","SET_MAX_VALUE","SET_MIN_VALUE","predicate","SET_EDIT","SET_COUNT","setCountAC","INC","RESET","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","key","serializedState","localStorage","getItem","JSON","parse","getLocalStorage","applyMiddleware","thunk","subscribe","getState","setItem","stringify","setLocalStorage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51b54f06.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2EuS7\"};","export enum Events {\r\n    INC = 'INC',\r\n    RESET = 'RESET',\r\n    SET_MIN_VALUE = 'SET_MIN_VALUE',\r\n    SET_MAX_VALUE = 'SET_MAX_VALUE',\r\n    SET_EDIT = 'SET_EDIT',\r\n    SET_COUNT = 'SET_COUNT'\r\n }","import React from 'react';\r\nimport s from './Counter.module.css';\r\n\r\nexport type CounterPropsType = {\r\n    count: number\r\n    maxValue: number\r\n    error: boolean\r\n    edit: boolean\r\n}\r\n\r\nexport const Counter: React.FC<CounterPropsType> = ({edit, error, count, maxValue}) => {\r\n    const classes = [\r\n        'counter',\r\n        count >= maxValue && s.active,\r\n        error ? s.error : ''\r\n    ]\r\n    const getTitle = () => {\r\n        if (error) {\r\n            return <div>Incorrect value!</div>\r\n        } else if (edit) {\r\n            return <div>end values and press \"set\"</div>\r\n        }\r\n        return <div>{count}</div>\r\n    }\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            {getTitle()}\r\n        </div>\r\n    )\r\n}","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\r\nimport s from './Button.module.css'\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\n\r\nexport const Button: React.FC<DefaultButtonPropsType>\r\n    = (props) =>\r\n    <button className={s.button} {...props}/>","import React from 'react';\r\nimport {Button} from '../Button/Button';\r\n\r\nexport type ControlPropsType = {\r\n    inc?: () => void\r\n    reset?: () => void\r\n    set?: () => void\r\n    count?: number\r\n    maxValue?: number\r\n    minValue?: number\r\n    error?: boolean\r\n    edit?: boolean\r\n    type: 'get' | 'set'\r\n}\r\n\r\nexport const Control: React.FC<ControlPropsType> =\r\n    ({\r\n         type, edit,\r\n         error, inc, reset,\r\n         set, count, maxValue,\r\n         minValue}) =>\r\n{\r\n\r\n    return (\r\n        <div className={'control'}>\r\n            {\r\n                type === 'get' ?\r\n                    <React.Fragment>\r\n                        <Button onClick={inc}\r\n                                disabled={count && maxValue && count >= maxValue || edit || error}>inc</Button>\r\n                        <Button onClick={reset} disabled={count === minValue || edit || error}>reset</Button>\r\n                    </React.Fragment>\r\n                    :\r\n                    <Button onClick={set} disabled={error || !edit}>set</Button>\r\n            }\r\n        </div>\r\n    )\r\n}","import React, {DetailedHTMLProps, InputHTMLAttributes} from 'react';\r\nimport style from './Input.module.css'\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\nexport type InputPropsType = {\r\n    title?: string\r\n    errorMessage:string\r\n}\r\nexport const Input: React.FC<InputPropsType & DefaultInputPropsType> =\r\n    ({errorMessage, title, ...restProps}) => {\r\n    const inputClasses = [\r\n        style.input,\r\n        errorMessage ? style.error : ''\r\n    ]\r\n    return (\r\n        <div className={style.root}>\r\n            <div className={style.title}>\r\n                {title}\r\n            </div>\r\n            <label className={style.label}>\r\n                {errorMessage && <div className={style.error_message}>{errorMessage}</div>}\r\n                <input className={inputClasses.join(' ')} {...restProps} type=\"number\"/>\r\n            </label>\r\n        </div>\r\n    )\r\n}","import {Events} from './events';\r\n\r\nexport const initialState = {\r\n    count: 0,\r\n    minValue: 0,\r\n    maxValue: 5,\r\n    edit: false,\r\n    error: false,\r\n    maxValueErrorMessage: '',\r\n    minValueErrorMessage: ''\r\n}\r\n\r\nexport type CountStateType = typeof initialState\r\n\r\nexport type CountActionsType = ReturnType<typeof incAC>\r\n    | ReturnType<typeof resetAC>\r\n    | ReturnType<typeof setCountAC>\r\n    | ReturnType<typeof setMaxValueAC>\r\n    | ReturnType<typeof setMinValueAC>\r\n    | ReturnType<typeof setEditAC>\r\n\r\n\r\n\r\n// export type handlersType = {\r\n//     [key in Events | 'DEFAULT']: (state: CountStateType, action: any) => CountStateType\r\n// }\r\n//\r\n//\r\n// const handlers: handlersType = {\r\n//     [Events.INC]: (state) => {\r\n//         return {\r\n//             ...state, count: state.count + 1\r\n//         }\r\n//     },\r\n//     [Events.RESET]: (state) => {\r\n//         return {\r\n//             ...state, count: state.minValue\r\n//         }\r\n//     },\r\n//     [Events.SET_COUNT]: (state, action) => {\r\n//         return {\r\n//             ...state, count: action.value\r\n//         }\r\n//     },\r\n//     [Events.SET_EDIT]: (state, action) => {\r\n//         return {\r\n//             ...state, edit: action.predicate\r\n//         }\r\n//     },\r\n//     [Events.SET_MAX_VALUE]: (state, {value}) => {\r\n//         if (value <= state.minValue) {\r\n//             return {\r\n//                 ...state,\r\n//                 edit: true,\r\n//                 maxValue: value,\r\n//                 maxValueErrorMessage: 'max value must be > min value',\r\n//                 minValueErrorMessage: 'min value must be < max value',\r\n//                 error: true\r\n//             }\r\n//         }\r\n//         if(value > state.minValue){\r\n//             return {\r\n//                 ...state,\r\n//                 edit: true,\r\n//                 maxValue: value,\r\n//                 maxValueErrorMessage: '',\r\n//                 minValueErrorMessage: '',\r\n//                 error: false\r\n//             }\r\n//         }\r\n//         if(state.minValue < 0){\r\n//             return {\r\n//                 ...state,\r\n//                 edit: true,\r\n//                 maxValue: value,\r\n//                 minValueErrorMessage: 'min value must be >= 0',\r\n//                 error: true\r\n//             }\r\n//         }\r\n//         if(value <= 0){\r\n//             return {\r\n//                 ...state,\r\n//                 edit: true,\r\n//                 maxValue: value,\r\n//                 maxValueErrorMessage: 'max value must be > 0',\r\n//                 error: true\r\n//             }\r\n//         }\r\n//         return {\r\n//             ...state, maxValue: value, edit: true\r\n//         }\r\n//     },\r\n//     [Events.SET_MIN_VALUE]: (state, {value}) => {\r\n//         if(value >= state.maxValue){\r\n//             return {\r\n//                 ...state,\r\n//                 edit: true,\r\n//                 minValue: value,\r\n//                 maxValueErrorMessage: 'max value must be > min value',\r\n//                 minValueErrorMessage: 'min value must be < max value',\r\n//                 error: true\r\n//             }\r\n//         }\r\n//         if(value < state.maxValue){\r\n//             return {\r\n//                 ...state,\r\n//                 edit: true,\r\n//                 minValue: value,\r\n//                 maxValueErrorMessage: '',\r\n//                 minValueErrorMessage: '',\r\n//                 error: false\r\n//             }\r\n//         }\r\n//         if(state.maxValue <= 0){\r\n//             return {\r\n//                     ...state,\r\n//                     edit: true,\r\n//                     minValue: value,\r\n//                     maxValueErrorMessage: 'max value must be >= 0',\r\n//                     error: true\r\n//             }\r\n//         }\r\n//         if(value < 0){\r\n//             return {\r\n//                 ...state,\r\n//                 edit: true,\r\n//                 minValue: value,\r\n//                 minValueErrorMessage: 'min value must be >= 0',\r\n//                 error: true\r\n//             }\r\n//         }\r\n//         return {\r\n//             ...state, minValue: value\r\n//         }\r\n//     },\r\n//     'DEFAULT': (state) => state\r\n// }\r\n\r\nexport const countReducer = (state: CountStateType = initialState, action: CountActionsType): CountStateType => {\r\n    switch (action.type) {\r\n        case Events.SET_MIN_VALUE:\r\n            if(action.value >= state.maxValue){\r\n            return {\r\n                ...state,\r\n                edit: true,\r\n                minValue: action.value,\r\n                maxValueErrorMessage: 'max value must be > min value',\r\n                minValueErrorMessage: 'min value must be < max value',\r\n                error: true\r\n            }\r\n        }\r\n        if(action.value < state.maxValue){\r\n            return {\r\n                ...state,\r\n                edit: true,\r\n                minValue: action.value,\r\n                maxValueErrorMessage: '',\r\n                minValueErrorMessage: '',\r\n                error: false\r\n            }\r\n        }\r\n        if(state.maxValue <= 0){\r\n            return {\r\n                    ...state,\r\n                    edit: true,\r\n                    minValue: action.value,\r\n                    maxValueErrorMessage: 'max value must be >= 0',\r\n                    error: true\r\n            }\r\n        }\r\n        if(action.value < 0){\r\n            return {\r\n                ...state,\r\n                edit: true,\r\n                minValue: action.value,\r\n                minValueErrorMessage: 'min value must be >= 0',\r\n                error: true\r\n            }\r\n        }\r\n        return {\r\n            ...state, minValue: action.value\r\n        }\r\n        case Events.SET_MAX_VALUE:\r\n            if (action.value <= state.minValue) {\r\n                return {\r\n                    ...state,\r\n                    edit: true,\r\n                    maxValue: action.value,\r\n                    maxValueErrorMessage: 'max value must be > min value',\r\n                    minValueErrorMessage: 'min value must be < max value',\r\n                    error: true\r\n                }\r\n            }\r\n            if(action.value > state.minValue){\r\n                return {\r\n                    ...state,\r\n                    edit: true,\r\n                    maxValue: action.value,\r\n                    maxValueErrorMessage: '',\r\n                    minValueErrorMessage: '',\r\n                    error: false\r\n                }\r\n            }\r\n            if(state.minValue < 0){\r\n                return {\r\n                    ...state,\r\n                    edit: true,\r\n                    maxValue: action.value,\r\n                    minValueErrorMessage: 'min value must be >= 0',\r\n                    error: true\r\n                }\r\n            }\r\n            if(action.value <= 0){\r\n                return {\r\n                    ...state,\r\n                    edit: true,\r\n                    maxValue: action.value,\r\n                    maxValueErrorMessage: 'max value must be > 0',\r\n                    error: true\r\n                }\r\n            }\r\n            return {\r\n                ...state, maxValue: action.value, edit: true\r\n            }\r\n        case Events.SET_COUNT:\r\n            return {\r\n                ...state, count: action.count\r\n            }\r\n        case Events.RESET:\r\n            return {\r\n                ...state, count: state.minValue\r\n            }\r\n        case Events.INC:\r\n            return {\r\n                ...state, count: state.count + 1\r\n            }\r\n        case Events.SET_EDIT:\r\n            return {\r\n                ...state, edit: action.predicate\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const incAC = () => {\r\n    return {\r\n        type: Events.INC\r\n    } as const\r\n}\r\nexport const resetAC = () => {\r\n    return {\r\n        type: Events.RESET\r\n    } as const\r\n}\r\nexport const setCountAC = (count: number) => {\r\n    return {\r\n        type: Events.SET_COUNT,\r\n        count\r\n    } as const\r\n}\r\nexport const setMaxValueAC = (value: number) => {\r\n    return {\r\n        type: Events.SET_MAX_VALUE,\r\n        value\r\n    } as const\r\n}\r\nexport const setMinValueAC = (value: number) => {\r\n    return {\r\n        type: Events.SET_MIN_VALUE,\r\n        value\r\n    } as const\r\n}\r\nexport const setEditAC = (predicate: boolean) => {\r\n    return {\r\n        type: Events.SET_EDIT,\r\n        predicate:predicate\r\n    } as const\r\n}\r\n\r\n// export type SetLocalStorageTCType = () => (dispatch: Dispatch, getState: () => AppStateType) => void\r\n// export type GetLocalStorageTCType = () => (dispatch: Dispatch) => void\r\n\r\n\r\n// export const setLocalStorageTC:SetLocalStorageTCType = () => (dispatch, getState) => {\r\n//     const maxValue = getState().count.maxValue\r\n//     const minValue = getState().count.minValue\r\n//     setLocalStorage('COUNT', {maxValue, minValue})\r\n//     dispatch(setCountAC(minValue))\r\n//     dispatch(setEditAC(false))\r\n// }\r\n// export const getLocalStorageTC:GetLocalStorageTCType = () => (dispatch) => {\r\n//     const value = getLocalStorage('COUNT', {maxValue: 5, minValue: 0})\r\n//     if (value) {\r\n//         dispatch(setMaxValueAC(value.maxValue))\r\n//         dispatch(setMinValueAC(value.minValue))\r\n//         dispatch(setCountAC(value.minValue))\r\n//         dispatch(setEditAC(false))\r\n//     }\r\n// }\r\n\r\n\r\n\r\n","import React, {ChangeEvent} from 'react';\nimport './App.css';\nimport {Counter} from './components/Counter/Counter';\nimport {Control} from './components/Control/Control';\nimport {Input} from './components/Input/Input';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {Dispatch} from 'redux';\nimport {\n    CountStateType,\n    incAC,\n    resetAC,\n    setCountAC,\n    setEditAC,\n    setMaxValueAC,\n    setMinValueAC\n} from './redux/countReducer';\nimport {AppStateType} from './redux/store';\n\nfunction App() {\n    const dispatch = useDispatch<Dispatch<any>>()\n    const {\n        count,\n        maxValue,\n        minValue,\n        edit,\n        maxValueErrorMessage,\n        minValueErrorMessage,\n        error\n    } = useSelector((state: AppStateType): CountStateType => state.count)\n\n\n    function inc() {\n        dispatch(incAC())\n    }\n\n    function reset() {\n        dispatch(resetAC())\n    }\n\n    function set() {\n        dispatch(setEditAC(false))\n        dispatch(setCountAC(minValue))\n    }\n\n    function maxValueChangeHandler(e: ChangeEvent<HTMLInputElement>) {\n        dispatch(setMaxValueAC(+e.currentTarget.value))\n    }\n\n    function minValueChangeHandler(e: ChangeEvent<HTMLInputElement>) {\n        dispatch(setMinValueAC(+e.currentTarget.value))\n    }\n\n    return (\n        <div className=\"root\">\n            <div className=\"window\">\n                <CountSetter minValue={minValue} maxValue={maxValue} maxValueChangeHandler={maxValueChangeHandler}\n                             maxValueErrorMessage={maxValueErrorMessage} minValueChangeHandler={minValueChangeHandler}\n                             minValueErrorMessage={minValueErrorMessage}/>\n                <Control edit={edit} type={'set'} set={set} error={error}/>\n            </div>\n            <div className=\"window\">\n                <Counter count={count} edit={edit} maxValue={maxValue}\n                         error={!!maxValueErrorMessage || !!minValueErrorMessage}/>\n                <Control edit={edit} type={'get'} inc={inc} reset={reset} count={count} maxValue={maxValue}\n                         minValue={minValue} error={!!maxValueErrorMessage || !!minValueErrorMessage}/>\n            </div>\n        </div>\n    );\n}\n\nexport type CountSetterPropsType = {\n    maxValue: number\n    minValue: number\n    maxValueChangeHandler: (e: ChangeEvent<HTMLInputElement>) => void\n    minValueChangeHandler: (e: ChangeEvent<HTMLInputElement>) => void\n    maxValueErrorMessage: string\n    minValueErrorMessage: string\n}\n\nexport const CountSetter: React.FC<CountSetterPropsType> = ({maxValue, maxValueChangeHandler, maxValueErrorMessage, minValue, minValueChangeHandler, minValueErrorMessage}) => {\n    return (\n        <div className=\"counter\">\n            <Input\n                title='max value:'\n                name=\"max\"\n                value={maxValue}\n                onChange={maxValueChangeHandler}\n                errorMessage={maxValueErrorMessage}\n\n            />\n            <Input\n                title='min value:'\n                name=\"min\"\n                value={minValue}\n                onChange={minValueChangeHandler}\n                errorMessage={minValueErrorMessage}\n            />\n        </div>\n    )\n}\n\nexport default App;\n\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {countReducer, CountStateType, initialState} from './countReducer';\r\nimport thunk from 'redux-thunk';\r\nimport {getLocalStorage, setLocalStorage} from '../utils/localStorage';\r\n\r\nconst rootReducer = combineReducers({\r\n    count:countReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer,getLocalStorage('COUNT'),applyMiddleware(thunk))\r\n\r\n\r\nstore.subscribe(()=>{\r\n    const edit = store.getState().count.edit\r\n    const state = store.getState()\r\n    if(!edit){\r\n        setLocalStorage<AppStateType>('COUNT', state)\r\n    }\r\n})","export function setLocalStorage<T>(key: string, state: T) {\r\n    localStorage.setItem(key, JSON.stringify(state))\r\n}\r\nexport function getLocalStorage(key: string) {\r\n    try{\r\n        const serializedState = localStorage.getItem(key)\r\n        if(serializedState === null){\r\n            return undefined\r\n        }\r\n        return JSON.parse(serializedState)\r\n    }\r\n    catch (e) {\r\n        return undefined\r\n    }\r\n\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from './redux/store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n    <React.StrictMode>=\n        <Provider store={store}><App/></Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Input_root__1Wnt_\",\"title\":\"Input_title__2QKwA\",\"input\":\"Input_input__2g8yw\",\"error\":\"Input_error__2QPkD\",\"error_message\":\"Input_error_message__2zgbK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"Counter_active__28C-0\",\"error\":\"Counter_error__k43ie\"};"],"sourceRoot":""}